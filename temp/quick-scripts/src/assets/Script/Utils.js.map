{"version":3,"sources":["assets/Script/Utils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nexport class Utils {\n    // 格式化秒转换00:00\n    static countDownFormat(sec: number) {\n        let nowM = Math.floor(sec % 3600 / 60);\n        let nowS = Math.floor(sec % 60);\n        let nowMStr = nowM.toString();\n        let nowSStr = nowS.toString();\n        if (nowM < 10) {\n            nowMStr = `0${nowM}`;\n        }\n        if (nowS < 10) {\n            nowSStr = `0${nowS}`;\n        }\n        return nowMStr + \":\" + nowSStr;\n    }\n\n    // 数组随机排序\n    static getRandomList(list) {\n        list.sort((a, b) => {\n            return 0.5 - Math.random();\n        });\n        return list;\n    }\n\n    // 去重数组\n    static getUniqueArray<T>(originArray: Array<T>): Array<T> {\n        const result = originArray.filter((v, i, arr) => {\n            return arr.indexOf(v, 0) === i;\n        });\n        return result;\n    }\n\n    // 获取范围内随机小数\n    static getRangeRandom(min, max) {\n        return Math.random() * (max - min + 1) + min;\n    }\n\n    // 获取范围内随机整数\n    static getRangeRandomInteger(min, max) {\n        const result = this.getRangeRandom(min, max);\n        return Math.floor(result);\n    }\n\n    // 获取范围内随机不重复数组\n    static getRandomArrayNoRepeat(min, max, arrayLength) {\n        let n = 0;\n        if (min <= 0) {\n            n = Math.abs(min) + 1;\n        }\n        const array = new Array(max + n)\n            .fill(0)\n            .map((v, i) => i + min)\n            .sort(() => 0.5 - Math.random())\n            .filter((v, i) => v <= max + n && i < arrayLength);\n        return array;\n    }\n\n    // 世界坐标转本地坐标\n    static worldConvertLocalPointAR(node, worldPoint) {\n        if (node) {\n            return node.convertToNodeSpaceAR(worldPoint);\n        }\n        return null;\n    }\n\n    // 本地坐标转世界坐标\n    static localConvertWorldPointAR(node) {\n        if (node) {\n            return node.convertToWorldSpaceAR(cc.v2(0, 0));\n        }\n        return null;\n    }\n\n    // 获取字符串中的数字\n    static getNumberFromStr(str) {\n        return str.replace(/[^0-9]/ig, \"\");\n    }\n\n    // 两个数组是否相同 只对数字\n    static isEqualsArray(arr: Array<number>, arr2: Array<number>) {\n        return JSON.stringify(arr.sort()) === JSON.stringify(arr2.sort());\n    }\n\n    // url参数 解析为一个对象\n    static getParmFromURL(url: string) {\n        // 先将字符串通过 split 方法，以 \"?\" 为分割符将其分割成数组；\n        // 该数组有两个元素，第一个为空字符串，第二个为 url 参数字符串\n        let arr = url.split('?')\n        if (arr.length < 2) {\n            cc.log(\"url缺少参数\");\n            return;\n        }\n        // 将参数字符串以 \"&\" 符号为分隔符进行分割\n        let params = arr[1].split('&')\n        // 定义一个数组用于存储参数\n        let obj = {}\n        // 通过循环将参数以键值对的形式存储在变量 obj 中\n        for (let i = 0; i < params.length; i++) {\n            let arr_params = params[i].split('=')\n            obj[arr_params[0]] = arr_params[1]\n        }\n        return obj\n    }\n\n    static stringFormat(str: string, ...args: any[]) {\n        for (let i = 0; i < args.length; i++) {\n            let id = `{${i}}`;\n            str = str.replace(id, args[i]);\n        }\n        return str;\n    }\n}\n"]}