{"version":3,"sources":["assets/Script/Loading.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA+C;AAEzC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAqC,2BAAY;IAAjD;QAAA,qEAqCC;QAlCC,WAAK,GAAa,IAAI,CAAC;QAEvB,gBAAU,GAAY,IAAI,CAAC;QAEnB,iBAAW,GAAc,EAAE,CAAC;;IA8BtC,CAAC;IA5BC,wBAAM,GAAN;QACE,EAAE,CAAC,KAAK,CAAC,kBAAkB,GAAG,KAAK,CAAC;QACpC,IAAM,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;QAClD,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QACvB,mCAAmC;QACnC,qBAAS,CAAC,4BAA4B,EAAE,CAAC;QACzC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,uBAAK,GAAL;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;IAC9C,CAAC;IAED,kCAAgB,GAAhB;QAAA,iBAcC;QAbC,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,UAAC,aAAa,EAAE,UAAU,EAAE,IAAI;YAC/D,IAAI,CAAC,GAAG,aAAa,GAAG,UAAU,CAAC;YACnC,KAAI,CAAC,KAAK,CAAC,MAAM,GAAM,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,MAAG,CAAC;YAC9C,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC3D,IAAI,CAAC,IAAI,CAAC,EAAE;oBACV,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;iBACnC;aACF;QACH,CAAC,EAAE;YACD,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC9B,EAAE,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAjCD;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;0CACI;IAEvB;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;+CACS;IALR,OAAO;QAD3B,OAAO;OACa,OAAO,CAqC3B;IAAD,cAAC;CArCD,AAqCC,CArCoC,EAAE,CAAC,SAAS,GAqChD;kBArCoB,OAAO","file":"","sourceRoot":"/","sourcesContent":["import { Constants } from \"./Config/Constants\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Loading extends cc.Component {\n\n  @property(cc.Label)\n  label: cc.Label = null;\n  @property(cc.Node)\n  greenGirds: cc.Node = null;\n\n  private _greenGirds: cc.Node[] = [];\n\n  onLoad() {\n    cc.macro.ENABLE_MULTI_TOUCH = false;\n    const manager = cc.director.getCollisionManager();\n    manager.enabled = true;\n    // manager.enabledDebugDraw = true;\n    Constants.storeParmForAssessStatistics();\n    this.preloadGameScene();\n  }\n\n  start() {\n    this._greenGirds = this.greenGirds.children;\n  }\n\n  preloadGameScene() {\n    cc.director.preloadScene('game', (completeCount, totalCount, item) => {\n      let v = completeCount / totalCount;\n      this.label.string = `${Math.floor(v * 100)}%`;\n      v = Math.floor(v * 10);\n      for (let i = 0, len = this._greenGirds.length; i < len; i++) {\n        if (i <= v) {\n          this._greenGirds[i].active = true;\n        }\n      }\n    }, () => {\n      cc.director.loadScene(\"game\");\n      cc.log('game scene preloaded');\n    });\n  }\n}\n"]}